"""
121. Best Time to Buy and Sell Stock
You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
Example 1:
  Input: prices = [7,1,5,3,6,4]
  Output: 5
  Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
  Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:
  Input: prices = [7,6,4,3,1]
  Output: 0
  Explanation: In this case, no transactions are done and the max profit = 0.
"""
prices = [7,1,5,3,6,4], sell>=buy
#----------------------------------------------------------
# buy         | 0                     | 1                 |
#----------------------------------------------------------
# buy prices  | 7                     | 1 (min.)          |
#----------------------------------------------------------
# sell        | 0 | 1 | 2 | 3 | 4 | 5 | 1 | 2 | 3 | 4 | 5 |
#----------------------------------------------------------
# sell prices | 7 | 1 | 5 | 3 | 6 | 4 | 1 | 5 | 3 | 6 | 4 |
#----------------------------------------------------------
# profit      | 0 |-6 |-2 |-4 |-1 |-3 | 0 | 4 | 2 | 5 | 3 |
#----------------------------------------------------------
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        profit = 0
        buy = 0
        for sell in range(buy, len(prices)):
            if prices[sell] < prices[buy]:
                buy = sell
            profit = max(profit, prices[sell] - prices[buy])
        return profit
