"""
118. Pascal's Triangle
Given an integer numRows, return the first numRows of Pascal's triangle.
In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:
Example 1:
  Input: numRows = 5
  Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:
  Input: numRows = 1
  Output: [[1]]
"""
#------------------------------------------------------------------------------------------------------------------------
#  i   |      |  0        |  1                 |  2                           |  3                                      | 
#------------------------------------------------------------------------------------------------------------------------
# temp |      |[0,1,0]    |[0,1,1,0]           |[0,1,2,1,0]                   |[0,1,3,3,1,0]                            |
# -----------------------------------------------------------------------------------------------------------------------
#  j   |      | ~2        | ~3                 | ~4                           | ~5                                      |
#------------------------------------------------------------------------------------------------------------------------
# row  |      |[1,1       |[1,2,1]             |[1,3,3,1]                     |[1,4,6,4,1]                              |
#------------------------------------------------------------------------------------------------------------------------
# res  |[[1]] |[[1],[1,1]]|[[1],[1,1],[1,2,1]] |[[1],[1,1],[1,2,1],[1,3,3,1]] |[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]|   
#------------------------------------------------------------------------------------------------------------------------
class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        res = [[1]]
        for i in range(numRows-1):
            temp = [0] + res[-1] + [0]
            row = []
            for j in range(len(res[-1])+1):
                row.append(temp[j] + temp[j+1])
            res.append(row)
        return res
#
#   0 1 3 3 1 /*tmp[::-1]*/
# + 1 3 3 1 0 /*tmp*/
#--------------
# = 1 4 6 4 1
# 
class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        res = [[1]]
        for _ in range(numRows - 1):
            tmp = res[-1] + [0]
            row = [x + y for x,y in zip(tmp, tmp[::-1])]
            res.append(row)
        return res
