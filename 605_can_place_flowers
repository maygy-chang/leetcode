"""
You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.
Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule.
Example 1:
  Input: flowerbed = [1,0,0,0,1], n = 1
  Output: true
Example 2:
  Input: flowerbed = [1,0,0,0,1], n = 2
  Output: false
"""
class Solution1:
    def planting(self, count, flowerbed, index=0):
        if count == 0:
            return True
        if index >= len(flowerbed):
            return False
        if flowerbed[index] == 1:
            return self.planting(count, flowerbed, index+2)
        if (index+1<len(flowerbed)) and flowerbed[index+1]==1:
            return self.planting(count, flowerbed, index+3)
        if flowerbed[index] == 0:
            flowerbed[index] = 1
            return self.planting(count-1, flowerbed, index+2)

    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        return self.planting(n, flowerbed)
        
class Solution2:
    def canPlaceFlowers(self, flowerbed: List[int], n:int) -> bool:
        f = [0] + flowerbed + [0]
        for i in range(1, len(f)-1):
            if f[i-1] == 0 and f[i]==0 and f[i+1] == 0:
                f[i] = 1
                n -= 1
        return n <= 0
