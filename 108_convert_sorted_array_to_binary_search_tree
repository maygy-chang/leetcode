"""
108. Convert Sorted Array to Binary Search Tree
Given an integer array nums where the elements are sorted in ascending order, convert it to a 
height-balanced binary search tree.
Example 1:
  Input: nums = [-10,-3,0,5,9]
  Output: [0,-3,9,-10,null,5]
  Explanation: [0,-10,5,null,-3,null,9] is also accepted:

Example 2:
  Input: nums = [1,3]
  Output: [3,1]
  Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.
"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:
        if not nums or len(nums) == 0:
            return None
        return self.getNode(nums, 0, len(nums) - 1)
    
    def getNode(self, nums: List[int], left:int, right:int) -> TreeNode:
        if left > right:
            return None
        # root兩邊一定要公平，則表示取中位數為根，左邊是左子樹所有節點，右邊是右子樹所有節點
        # 遞迴各自分拆，直到分到沒有節點為止
        medium = (left + right) // 2
        root = TreeNode(nums[medium])
        root.left = self.getNode(nums, left, medium - 1)
        root.right = self.getNode(nums, medium + 1, right)
        return root
