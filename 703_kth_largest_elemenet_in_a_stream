"""
703. Kth Largest Element in a Stream
Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.
Implement KthLargest class:
KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.
int add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.
Example 1:
  Input
    ["KthLargest", "add", "add", "add", "add", "add"]
    [[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]
  Output
    [null, 4, 5, 5, 8, 8]
  Explanation
  KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);
  kthLargest.add(3);   // return 4
  kthLargest.add(5);   // return 5
  kthLargest.add(10);  // return 5
  kthLargest.add(9);   // return 8
  kthLargest.add(4);   // return 8
"""
class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        self.minHeap = nums
        self.k = k
        heapq.heapify(self.minHeap)
        while len(self.minHeap) > k:
            heapq.heappop(self.minHeap)

    def add(self, val: int) -> int:
        heapq.heappush(self.minHeap, val)
        if len(self.minHeap) > self.k:
            heapq.heappop(self.minHeap)
        return self.minHeap[0]
"""        
Introduction Heap:
https://cloud.tencent.com/developer/article/1794191
https://ithelp.ithome.com.tw/articles/10206479
堆積 (Heap)，是一種特殊的完全二元樹，而堆疊不一樣，是完全不同的概念。
有分兩種，一種是最小堆積，另一種是最大堆積。
最小堆積: 完全二元樹所有的父節點都比子節點要小，就屬於最小堆積。
最大堆積: 若完全二元樹所有的父節點都比子節點要大，則為最大堆積。
1. heap sort:
  array = [10, 17, 50, 7, 30, 24, 27, 45, 15, 5, 36, 21]
  heap = []
  for num in array:
    heapq.heappush(heap, num)
  heap_sort = [heapq.heappop(heap) for _ in range(len(heap))]
2. largest value or smallest value
  array = [10, 17, 50, 7, 30, 24, 27, 45, 15, 5, 36, 21]
  heapq.heapify(array)
  print(heapq.nlargest(2, array))
  print(heapq.nsmallest(3, array))
3. merge
  array_a = [10, 7, 15, 8]
  array_b = [17, 3, 8, 20, 13]
  array_merge = heapq.merge(sorted(array_a), sorted(array_b))
4. swap
  array_c = [10, 7, 15, 8]
  heapq.heapify(array_c)
  print("before:", array_c)
  # 先push再pop
  item = heapq.heappushpop(array_c, 5)
  print("after: ", array_c)
  print(item)

"""
