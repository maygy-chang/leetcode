"""
15. 3Sum
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.
Example 1:
  Input: nums = [-1,0,1,2,-1,-4]
  Output: [[-1,-1,2],[-1,0,1]]
  Explanation: 
  nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
  nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
  nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
  The distinct triplets are [-1,0,1] and [-1,-1,2].
  Notice that the order of the output and the order of the triplets does not matter.
Example 2:
  Input: nums = [0,1,1]
  Output: []
  Explanation: The only possible triplet does not sum up to 0.
Example 3:
  Input: nums = [0,0,0]
  Output: [[0,0,0]]
  Explanation: The only possible triplet sums up to 0.
"""
class Solution1:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        result = []
        # 將數值由小到大排序
        nums.sort()
        # 三個值分別為a, nums[left], nums[right]，且a<nums[left]<nums[right]
        for i, a in enumerate(nums):
            if i > 0 and a == nums[i-1]:
                continue
            left, right = i+1, len(nums)-1
            # 用兩個指標去尋找第二第三個值，
            while left < right:
                threeSum = a + nums[left] + nums[right]
                if threeSum > 0:
                    # 總和大於0，表示第三個值太大，將右指標所移
                    right -= 1
                elif threeSum < 0:
                    # 總和小於0，表示第二個值太大，將左指標右移
                    left += 1
                else:
                    result.append([a, nums[left], nums[right]])
                    left += 1
                    while nums[left] == nums[left-1] and left < right:
                        left += 1
        return result

class Solution2:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        result = []
        d = Counter(nums)
        print(d)
        pos = [x for x in d if x >0]
        neg = [x for x in d if x <0]
        if d.get(0, 0) > 2:
            result.append([0,0,0])
        for x in pos:
            for y in neg:
                s = -(x + y)
                if s in d:
                    if s == x and d[x] > 1:
                        result.append([x, x, y])
                    elif s == y and d[y] > 1:
                        result.append([x, y, y])
                    elif y < s < x:
                        result.append([x, y, s])
        return result
        
class Solution3:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        # sorted nums to check data easily
        nums.sort()
        # use set to check non-deuplicated values
        res = set()
        # target = first + second + third
        # third = target - first - second
        # first range: index = 0 ~ len(nums) - 2 and first should not be deplicated
        # second range: index - 1 ~ len(nums) - 1
        # use hash map to check unique values like twoSums
        for i, v in enumerate(nums[:-2]):
            # skip duplicate values
            if i >= 1 and v == nums[i-1]:
                continue
            hashmap = {}
            for x in nums[i+1:]:
                if not hashmap.__contains__(x):
                    hashmap[-v-x] = 1
                else:
                    res.add((v, -v-x, x))
        return list(res)
