"""
94. Binary Tree Inorder Traversal
Given the root of a binary tree, return the inorder traversal of its nodes' values.
Example 1:
  Input: root = [1,null,2,3]
  Output: [1,3,2]
Example 2:
  Input: root = []
  Output: []
Example 3:
  Input: root = [1]
  Output: [1]
前序走訪: root->left->right
中序走訪(inorder): left->root->right
後序走訪: left->right->root
"""

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
# 
class Solution1:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        result = []
        stack = []  /*儲存Node*/
        current = root
        while current or stack:
            while current:
                stack.append(current)
                /*先往左邊移動*/
                current = current.left
            current = stack.pop()
            /*POP數值，存儲*/
            result.append(current.value)
            /*再往右邊移動*/
            current = current.right
        return result
        
class Solution2:
    def inorder(self, root: TreeNode, res: List[int]) -> None:
        if root:
            return
        self.inorder(root.left, res)
        res.append(root.val)
        self.inorder(root.right, res)
        
    def preorder(self, root: TreeNode, res: List[int]) -> None:
        if root:
            return
        res.append(root.val)
        self.preorder(root.left, res)
        self.preorder(root.right, res)
        
    def postorder(self, root: TreeNode, res: List[int]) -> None:
        if root:
            return
        self.preorder(root.left, res)
        self.preorder(root.right, res)
        res.append(root.val)
        
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        res = []
        self.inorder(root, res)
        return res
        
