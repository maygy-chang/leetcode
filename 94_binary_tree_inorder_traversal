"""
94. Binary Tree Inorder Traversal
Given the root of a binary tree, return the inorder traversal of its nodes' values.
Example 1:
  Input: root = [1,null,2,3]
  Output: [1,3,2]
Example 2:
  Input: root = []
  Output: []
Example 3:
  Input: root = [1]
  Output: [1]
前序走訪: root->left->right
中序走訪(inorder): left->root->right
後序走訪: left->right->root
"""

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
# 
class Solution1:
    # Example 1:
    #   Input: root = [1,null,2,3]
    #               1
    #             .    .  
    #          .        2  
    #        Null     .
    #              3               
    #  while1 | 1th                  | 2th                | 3th                  | 4th
    # --------------------------------------------------------------------------------------------------                        
    #  while2 | stack = [1]          | stack = [2]        | stack = [2, 3]       | 
    #         | "left" current=Null  | "left" current=3   | "left" current=None  | current=None
    #         | break while2         |                    | break while2         | break while2
    # --------------------------------------------------------------------------------------------------
    #         | stack = [1]          |                    | stack = [2, 3]       | stack = [2]  
    #  pop    | "pop" current=1      |                    | "pop" current=3      | "pop" current=2
    #         | result = [1]         |                    | result = [1, 3]      | result = [1,3,2]    
    # --------------------------------------------------------------------------------------------------
    #         | "right" current=2    |                    | "right" current=None | "right" current=None 
    # --------------------------------------------------------------------------------------------------

    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        result = []
        stack = []  /*儲存Node*/
        current = root
        while current or stack:
            while current:
                stack.append(current)
                /*先往左邊移動*/
                current = current.left
            current = stack.pop()
            /*POP數值，存儲*/
            result.append(current.val)
            /*再往右邊移動*/
            current = current.right
        return result
        
class Solution2:
    def inorder(self, root: TreeNode) -> None:
        if root:
            return
        self.inorder(root.left)
        self.result.append(root.val)
        self.inorder(root.right)
        
    def preorder(self, root: TreeNode) -> None:
        if root:
            return
        self.result.append(root.val)
        self.preorder(root.left)
        self.preorder(root.right)
        
    def postorder(self, root: TreeNode) -> None:
        if root:
            return
        self.preorder(root.left)
        self.preorder(root.right)
        self.result.append(root.val)
        
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        self.result = []
        self.inorder(roots)
        return self.result
        
