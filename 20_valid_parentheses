"""
20. Valid Parentheses
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
Example 1:
  Input: s = "()"
  Output: true
Example 2:
  Input: s = "()[]{}"
  Output: true
Example 3:
  Input: s = "(]"
  Output: false
"""
class Solution1:
    def isValid(self, s: str) -> bool:
        symbols = {")":"(", "]":"[", "}":"{"}
        stack = []
        for c in s:
            if c not in symbols.keys():
                stack.append(c)
                continue
            if not stack or stack[-1] != symbols[c]:
                return False
            stack.pop()
        return not stack
        
class Solution2:
    def isValid(self, s: str) -> bool:
        stack = []
        for i in s:
            if not stack:
                stack.append(i)
            elif ( i==")" and stack[-1] == "(" ) or \
                (i=="]" and stack[-1] == "[") or \
                (i=="}" and stack[-1] == "{"):
                stack.pop()
            else:
                stack.append(i)
        if not stack:
            return True
        else:
            return False
