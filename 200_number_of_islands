"""
200. Number of Islands
Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.
An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.
Example 1:
  Input: grid = [
    ["1","1","1","1","0"],
    ["1","1","0","1","0"],
    ["1","1","0","0","0"],
    ["0","0","0","0","0"]
  ]
  Output: 1
Example 2:
  Input: grid = [
    ["1","1","0","0","0"],
    ["1","1","0","0","0"],
    ["0","0","1","0","0"],
    ["0","0","0","1","1"]
  ]
  Output: 3
"""
class Solution1:

    def dfs(self, r, c):
        if r not in range(self.rows) or \
            c not in range(self.cols) or \
            self.grid[r][c] == "0" or \
            (r, c) in self.visited:
            return 
        self.visited.add((r, c))
        directions = [[0,1],[0,-1],[1,0],[-1,0]]
        for dr, dc in directions:
            self.dfs(r+dr, c+dc)

    def numIslands(self, grid: List[List[str]]) -> int:
        self.rows = len(grid)
        self.cols = len(grid[0])
        self.grid = grid
        self.visited = set()
        count = 0
        for r in range(self.rows):
            for c in range(self.cols):
                if self.grid[r][c] == "1" and (r, c) not in self.visited:
                    count += 1
                    self.dfs(r, c)
        return count
        
class Solution2:

    def bfs(self, r, c):
        q = deque()
        self.visited.add((r, c))
        q.append((r,c))
        while q:
            row, col = q.popleft()
            directions = [[1,0], [-1,0], [0,1], [0,-1]]
            for dr, dc in directions:
                r, c = row + dr, col + dc
                if r in range(self.rows) and \
                    c in range(self.cols) and \
                    self.grid[r][c] == "1" and \
                    (r, c) not in self.visited:
                    q.append((r,c))
                    self.visited.add((r,c)) 

    def numIslands(self, grid: List[List[str]]) -> int:
        self.rows = len(grid)
        self.cols = len(grid[0])
        self.grid = grid
        self.visited = set()
        count = 0
        for r in range(self.rows):
            for c in range(self.cols):
                if self.grid[r][c] == "1" and (r, c) not in self.visited:
                    self.bfs(r, c)
                    count += 1
        return count
